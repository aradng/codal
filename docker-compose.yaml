x-dagster: &dagster
  build: .
  env_file: .env
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /tmp/io_manager_storage:/tmp/io_manager_storage
    - /dagster/history:/opt/dagster/history
    - /dagster/storage:/opt/dagster/storage
    - /dagster/schedules:/opt/dagster/schedules
    - ./dagster.yaml:/opt/dagster/dagster.yaml
    - ./workspace.yaml:/opt/dagster/workspace.yaml
    - .:/apps
  depends_on:
    - postgres
    - mongo
    - code-server
  restart: always

services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: $DAGSTER_POSTGRES_USER
      POSTGRES_PASSWORD: $DAGSTER_POSTGRES_PASSWORD
      POSTGRES_DB: $DAGSTER_POSTGRES_DB
    volumes:
      - /data/pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DAGSTER_POSTGRES_USER -d $DAGSTER_POSTGRES_DB"]
      interval: 10s
      timeout: 8s
      retries: 5

  mongo:
    image: mongo:4.4.18
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: $MONGO_PASSWORD
    volumes:
      - /data/codal:/data/db
    ports:
      - "${MONGO_PORT:-27017}:27017"
    restart: always

  code-server:
    working_dir: /apps
    environment:
      DAGSTER_CURRENT_IMAGE: codal-code-server
    command: dagster code-server start -h 0.0.0.0 -p 4000 -m codal.definitions --inject-env-vars-from-instance
    <<: *dagster
    depends_on:
      - postgres
      - mongo

  dagster-daemon:
    command: dagster-daemon run
    <<: *dagster

  dagster-webserver:
    command: dagster-webserver -h 0.0.0.0 -p 3000
    ports:
      - "3000:3000"
    <<: *dagster

  backend:
    build:
      dockerfile: Dockerfile.backend
      context: .
    command: uvicorn codal.app:app --host 0.0.0.0 --port 8000 --reload
    working_dir: /app
    env_file: .env
    restart: always
    volumes:
      - ./codal:/app/codal

networks:
  default:
    driver: bridge
    name: dagster
    enable_ipv6: true
    external: true
